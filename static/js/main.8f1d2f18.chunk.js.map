{"version":3,"sources":["serviceWorker.js","reducers/counter.js","reducers/isLogged.js","reducers/isLoading.js","reducers/data.js","reducers/index.js","actions/index.js","pages/Home.js","pages/Login.js","pages/NotFound.js","pages/Root.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","counterReducer","state","action","type","payload","loggedReducer","loaderReducer","initialUserState","arr","users","books","country","dataReducer","rootReducer","combineReducers","counter","isLogged","isLoading","data","increment","incrementByValue","value","decrement","decrementByValue","decrementByValueAsnc","dispatch","setTimeout","loadAPIData","fetch","then","response","json","jsonData","catch","err","console","log","finally","Home","Login","NotFound","Root","exact","path","component","App","useSelector","useDispatch","useStore","className","onClick","todoItems","arrs","map","todo","key","id","title","persistedState","serializedState","localStorage","getItem","JSON","parse","e","loadFromLocalStorage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","logger","thunk","next","result","getState","subscribe","throttle","stringify","setItem","saveToLocalStorage","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f1d2f18.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// REDUCER\nconst counterReducer = (state = 10, action) => {\n    switch (action.type) {\n        case 'INCREMENT':\n            return state + 1;\n        case 'INCREMENT_BY_VALUE':\n            return state + action.payload;\n        case 'DECREMENT':\n            return state - 1;\n        case 'DECREMENT_BY_VALUE':\n            return state - action.payload;\n        default:\n            return state;\n    }\n};\n\nexport default counterReducer;","// REDUCER\nconst loggedReducer = (state = false, action) => {\n    switch (action.type) {\n        case 'SIGN_IN':\n            return !state;\n        default:\n            return state;\n    }\n};\n\nexport default loggedReducer;","// REDUCER\nconst loaderReducer = (state = false, action) => {\n    switch (action.type) {\n        case 'IS_LOADING':\n            return !state;\n        default:\n            return state;\n    }\n};\n\nexport default loaderReducer;","// REDUCER\n\nconst initialUserState = {\n    arr: [],\n    users: [],\n    books: [],\n    country: []\n};\n\nconst dataReducer = (state = initialUserState, action) => {\n    switch (action.type) {\n        case 'LOADED':\n            return {\n                ...state,\n                arr: action.payload\n            };\n        default:\n            return state;\n    }\n};\n\nexport default dataReducer;","\nimport { combineReducers } from 'redux';\nimport counterReducer from './counter';\nimport loggedReducer from './isLogged';\nimport loaderReducer from './isLoading';\nimport dataReducer from './data';\n\nconst rootReducer = combineReducers({\n    counter: counterReducer,\n    isLogged: loggedReducer,\n    isLoading: loaderReducer,\n    data: dataReducer\n});\n\nexport default rootReducer;","// ACTION\nexport const increment = () => {\n    return {\n        type: 'INCREMENT'\n    };\n};\n\nexport const incrementByValue = (value) => {\n    return {\n        type: 'INCREMENT_BY_VALUE',\n        payload: value\n    };\n};\n\nexport const decrement = () => {\n    return {\n        type: 'DECREMENT'\n    };\n};\n\nexport const decrementByValue = (value) => {\n    return {\n        type: 'DECREMENT_BY_VALUE',\n        payload: value\n    };\n};\n\nexport const isLoading = () => {\n    return {\n        type: 'IS_LOADING',\n    };\n};\n\nexport const decrementByValueAsnc = (value) => {\n    return dispatch => {\n        // console.log('start dispatch');\n        dispatch(isLoading());\n        setTimeout(() => {\n            // console.log('stop dispatch');\n            dispatch(isLoading());\n            dispatch(decrementByValue(value));\n        }, 3000);\n    };\n};\n\nexport const loadAPIData = () => {\n    return dispatch => {\n        dispatch(isLoading());\n        setTimeout(() => {\n            fetch('https://jsonplaceholder.typicode.com/posts?_limit=5')\n                .then(response => response.json())\n                .then(jsonData => {\n                    // Second Action Dispatch\n                    dispatch({ type: 'LOADED', payload: jsonData });\n                    // console.log({ jsonData });\n                })\n                .catch(err => {\n                    // Third Action Dispatch\n                    // dispatch({ type: 'ERROR', payload: err });\n                    console.log({ err });\n                }).finally(() => {\n                    dispatch(isLoading());\n                });\n        }, 1000);\n    };\n\n};","import React from 'react'\n\nexport default function Home() {\n    return (\n        <div>\n            <h1>Home page</h1>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Login() {\n    return (\n        <div>\n            <h1>Login page</h1>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function NotFound() {\n    return (\n        <div>\n            <h1>Page not found *404* Error</h1>\n        </div>\n    )\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, NavLink, Switch, Redirect } from 'react-router-dom';\nimport Home from './Home';\nimport Login from './Login';\nimport NotFound from './NotFound';\n\nexport default function Root() {\n    return (\n        <div>\n            <Router>\n                <Switch>\n                    <Route exact path='/' component={Home} />\n                    <Route path='/login' component={Login} />\n                    <Route component={NotFound} />\n                </Switch>\n            </Router>\n        </div>\n    )\n}\n","import React from 'react';\n// import './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useSelector, useDispatch, useStore } from 'react-redux';\nimport {\n  increment,\n  decrement,\n  incrementByValue,\n  decrementByValueAsnc,\n  decrementByValue,\n  loadAPIData\n} from './actions';\n\nimport Root from './pages/Root';\n\nfunction App() {\n\n  const counter = useSelector(state => state.counter);\n  const isLogged = useSelector(state => state.isLogged);\n  const isLoading = useSelector(state => state.isLoading);\n  const data = useSelector(state => state.data);\n\n  const dispatch = useDispatch();\n\n  const store = useStore();\n\n  let arr = data.arr;\n  // console.log(data);\n  // console.log({ isLoading });\n  // console.log({ counter });\n  // console.log({ isLogged });\n\n\n  function Lists({ arrs }) {\n    // console.log({ arrs });\n    const todoItems = arrs.map((todo) => <li key={todo.id}>{todo.title}</li>);\n\n    return (\n      <ul>{todoItems}</ul>\n    );\n  }\n\n\n\n  function onClickHandle() {\n    // console.log('onClickHandle');\n    dispatch(increment());\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className='text-center'>React and redux {counter}</h1>\n\n      <div>\n        {/* {store.getState()} */}\n      </div>\n      <button\n        className='btn btn-primary'\n        onClick={onClickHandle}\n      >\n        increment {counter}\n      </button>\n\n      <button\n        className='btn btn-danger'\n        onClick={() => dispatch(decrement())}\n      >\n        decrement {counter}\n      </button>\n\n      <button\n        className='btn btn-primary'\n        onClick={() => dispatch(incrementByValue(5))}\n      >\n        increment by value {counter}\n      </button>\n\n      <button\n        className='btn btn-info'\n        onClick={() => dispatch(decrementByValueAsnc(5))}\n      >\n        decrement by value async {counter}\n      </button>\n      <button\n        className='btn btn-warning'\n        onClick={() => dispatch(decrementByValue(5))}\n      >\n        decrement by value {counter}\n      </button>\n      {isLoading && <p>Its loading</p>}\n\n      <div>\n        <button\n          className='btn btn-info'\n          onClick={() => dispatch(loadAPIData())}\n        >\n          Load api data\n      </button>\n      </div>\n      <div>\n        <p>one</p>\n        <Lists arrs={arr} />\n        <p>two</p>\n      </div>\n      <Root />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from \"react-redux\";\nimport logger from 'redux-logger'\nimport rootReducer from './reducers';\nimport App from './App';\nimport throttle from 'lodash/throttle';\n\n\nconst logAction = store => {\n    return next => {\n        return action => {\n            const result = next(action);\n            console.log(result);\n            console.log(store.getState());\n            return result;\n        };\n    };\n};\n\n\nconst ownLogger = store => next => action => {\n    console.log('dispatching', action);\n    let result = next(action);\n    console.log('next state', store.getState());\n    return result;\n};\n\n\nfunction saveToLocalStorage(state) {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', serializedState);\n\n    } catch (e) {\n        console.log(e);\n    }\n}\n\nfunction loadFromLocalStorage() {\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) return undefined;\n        return JSON.parse(serializedState);\n\n    } catch (e) {\n        console.log(e);\n        return undefined;\n    }\n}\n\nconst persistedState = loadFromLocalStorage();\n\n// this will work on both firefox and chrome\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// STORE\nconst store = createStore(\n    rootReducer,\n    persistedState,\n    composeEnhancers(applyMiddleware(logger, thunk, logAction, ownLogger)));\n\n\n// console.log({ store });\n\n\nstore.subscribe(throttle(() => {\n    saveToLocalStorage(store.getState());\n}, 2000));\n\n/**\n\n// ACTION\nconst increment = () => {\n    return {\n        type: 'INCREMENT'\n    };\n};\n\nconst decrement = () => {\n    return {\n        type: 'DECREMENT'\n    };\n};\n\n// REDUCER\nconst counter = (state = 0, action) => {\n    switch (action.type) {\n        case 'INCREMENT':\n            return state + 1;\n        case 'DECREMENT':\n            return state - 1;\n    }\n\n};\n\n// Display\nstore.subscribe(() => {\n    console.log(store.getState());\n});\n\n// DISPATCH\nstore.dispatch(increment());\nstore.dispatch(increment());\nstore.dispatch(decrement());\nstore.dispatch(increment());\nstore.dispatch({ type: 'INCREMENT' });\n*/\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}