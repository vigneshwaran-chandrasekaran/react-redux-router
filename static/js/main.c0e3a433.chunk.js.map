{"version":3,"sources":["serviceWorker.js","reducers/counter.js","reducers/isLogged.js","reducers/isLoading.js","reducers/data.js","reducers/index.js","configureStore.js","localStorage.js","components/Home.js","components/Login.js","components/NotFound.js","components/Navigation.js","actions/index.js","components/SampleRedux.js","components/Routes.js","App.js","index.js","components/Root.js"],"names":["Boolean","window","location","hostname","match","counterReducer","state","action","type","payload","loggedReducer","loaderReducer","initialUserState","arr","users","books","country","dataReducer","rootReducer","combineReducers","counter","isLogged","isLoading","data","configureStore","persistedState","serializedState","localStorage","getItem","JSON","parse","e","console","log","loadFromLocalStorage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","thunk","store","createStore","applyMiddleware","process","subscribe","throttle","stringify","setItem","saveToLocalStorage","getState","Home","Login","NotFound","Navigation","Navbar","collapseOnSelect","expand","bg","variant","Brand","as","NavLink","to","Toggle","aria-controls","Collapse","id","Nav","className","Link","exact","increment","incrementByValue","value","decrement","decrementByValue","decrementByValueAsnc","dispatch","setTimeout","loadAPIData","fetch","then","response","json","jsonData","catch","err","finally","SampleRedux","useSelector","useDispatch","useStore","aria-label","onClick","todoItems","arrs","map","todo","key","title","Routes","path","component","App","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0e3a433.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// REDUCER\nconst counterReducer = (state = 10, action) => {\n    switch (action.type) {\n        case 'INCREMENT':\n            return state + 1;\n        case 'INCREMENT_BY_VALUE':\n            return state + action.payload;\n        case 'DECREMENT':\n            return state - 1;\n        case 'DECREMENT_BY_VALUE':\n            return state - action.payload;\n        default:\n            return state;\n    }\n};\n\nexport default counterReducer;","// REDUCER\nconst loggedReducer = (state = false, action) => {\n    switch (action.type) {\n        case 'SIGN_IN':\n            return !state;\n        default:\n            return state;\n    }\n};\n\nexport default loggedReducer;","// REDUCER\nconst loaderReducer = (state = false, action) => {\n    switch (action.type) {\n        case 'IS_LOADING':\n            return !state;\n        default:\n            return state;\n    }\n};\n\nexport default loaderReducer;","// REDUCER\n\nconst initialUserState = {\n    arr: [],\n    users: [],\n    books: [],\n    country: []\n};\n\nconst dataReducer = (state = initialUserState, action) => {\n    switch (action.type) {\n        case 'LOADED':\n            return {\n                ...state,\n                arr: action.payload\n            };\n        default:\n            return state;\n    }\n};\n\nexport default dataReducer;","\nimport { combineReducers } from 'redux';\nimport counter from './counter';\nimport isLogged from './isLogged';\nimport isLoading from './isLoading';\nimport data from './data';\n\nconst rootReducer = combineReducers({\n    counter,\n    isLogged,\n    isLoading,\n    data\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport throttle from 'lodash/throttle';\nimport rootReducer from './reducers';\nimport { saveToLocalStorage, loadFromLocalStorage } from './localStorage';\n\nconst configureStore = () => {\n    const logAction = store => {\n        return next => {\n            return action => {\n                const result = next(action);\n                console.log(result);\n                console.log(store.getState());\n                return result;\n            };\n        };\n    };\n\n    const ownLogger = store => next => action => {\n        console.log('dispatching', action);\n        let result = next(action);\n        console.log('next state', store.getState());\n        return result;\n    };\n\n    // read already saved state data from local storage\n    const persistedState = loadFromLocalStorage();\n\n    // this will work on both firefox and chrome\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n    const middlewares = [thunk]; // all environment middleware\n    if (process.env.NODE_ENV !== 'production') {\n        // not production mode middlewares\n        middlewares.push(logger, logAction, ownLogger);\n    }\n\n    // STORE\n    const store = createStore(\n        rootReducer,\n        persistedState, // initial store values (it will override the rootReducer state values)\n        composeEnhancers(\n            applyMiddleware(...middlewares) // middleware for logging, thunk...\n        )\n    );\n\n    // to find which mode is running\n    console.log(process.env.NODE_ENV);\n    if (process.env.NODE_ENV === 'development') {\n        console.log('development server is running...');\n    }\n\n    store.subscribe(throttle(() => {\n        // write current state data to local storage\n        saveToLocalStorage(store.getState());\n    }, 2000));\n\n    return store;\n};\n\nexport default configureStore;\n\n/**\n * sample redux concepts\n *\n// ACTION\nconst increment = () => {\n    return {\n        type: 'INCREMENT'\n    };\n};\n\nconst decrement = () => {\n    return {\n        type: 'DECREMENT'\n    };\n};\n\n// REDUCER\nconst counter = (state = 0, action) => {\n    switch (action.type) {\n        case 'INCREMENT':\n            return state + 1;\n        case 'DECREMENT':\n            return state - 1;\n    }\n};\n\n// Display\nstore.subscribe(() => {\n    console.log(store.getState());\n});\n\n// DISPATCH\nstore.dispatch(increment());\nstore.dispatch(increment());\nstore.dispatch(decrement());\nstore.dispatch(increment());\nstore.dispatch({ type: 'INCREMENT' });\n*/","export const saveToLocalStorage = (state) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', serializedState);\n    } catch (e) {\n        console.log(e);\n    }\n};\n\nexport const loadFromLocalStorage = () => {\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) return undefined;\n        return JSON.parse(serializedState);\n    } catch (e) {\n        console.log(e);\n        return undefined;\n    }\n};","import React from 'react'\n\nexport default function Home() {\n    return (\n        <div>\n            <h1>Home page</h1>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Login() {\n    return (\n        <div>\n            <h1>Login page</h1>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function NotFound() {\n    return (\n        <div>\n            <h1>Page not found *404* Error</h1>\n        </div>\n    )\n}\n","import React from 'react'\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport { NavLink } from 'react-router-dom';\n\n/**\n * import { Nav, Navbar, NavDropdown, MenuItem, Tabs, ButtonToolbar, Button,\nTable, ButtonGroup, Row, Col, Grid, Panel, FormGroup, FormControl} from 'react-bootstrap';\n */\n\nexport default function Navigation() {\n    return (\n        <div>\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"info\" variant=\"dark\">\n                <Navbar.Brand as={NavLink} to=\"/\">React</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link exact as={NavLink} to='/'>Home</Nav.Link>\n                        <Nav.Link as={NavLink} to='/login'>Login</Nav.Link>\n                        <Nav.Link as={NavLink} to='/redux-example'>Redux example</Nav.Link>\n                        {/* <Nav.Link as={NavLink} to='/about'>About</Nav.Link>\n                        <Nav.Link as={NavLink} to='/common-two'>Array Route 2</Nav.Link>\n                        <Nav.Link as={NavLink} to='/topics'>Topics</Nav.Link>\n                        <Nav.Link as={NavLink} to='/dashboard'>Dashboard</Nav.Link>\n                        <Nav.Link as={NavLink} to='/redirect'>Redirect</Nav.Link>\n                        <NavDropdown title=\"Protected\" id=\"collasible-nav-dropdown\">\n                            <NavDropdown.Item exact as={NavLink} to=\"/protected\">Protected</NavDropdown.Item>\n                            <NavDropdown.Item as={NavLink} to=\"/private\">Private</NavDropdown.Item>\n                            <NavDropdown.Divider />\n                            <NavDropdown.Item as={NavLink} to=\"/private/100\">Private/param</NavDropdown.Item>\n                        </NavDropdown> */}\n                    </Nav>\n                    {/* <Nav>\n                        <Nav.Link as={NavLink} to=\"/contact\">Contact</Nav.Link>\n                    </Nav> */}\n                </Navbar.Collapse>\n            </Navbar>\n        </div>\n    )\n}\n","// ACTIONS\n\nexport const increment = () => ({\n    type: 'INCREMENT'\n});\n\nexport const incrementByValue = (value) => ({\n    type: 'INCREMENT_BY_VALUE',\n    payload: value\n});\n\nexport const decrement = () => ({\n    type: 'DECREMENT'\n});\n\nexport const decrementByValue = (value) => ({\n    type: 'DECREMENT_BY_VALUE',\n    payload: value\n});\n\nexport const isLoading = () => ({\n    type: 'IS_LOADING'\n});\n\n// simplified thunk action without return keyword\nexport const decrementByValueAsnc = value => dispatch => {\n    dispatch(isLoading());\n    setTimeout(() => {\n        dispatch(isLoading());\n        dispatch(decrementByValue(value));\n    }, 3000);\n};\n\nexport const loadAPIData = () => {\n    return dispatch => {\n        dispatch(isLoading());\n        setTimeout(() => {\n            fetch('https://jsonplaceholder.typicode.com/posts?_limit=5')\n                .then(response => response.json())\n                .then(jsonData => {\n                    // Second Action Dispatch\n                    dispatch({ type: 'LOADED', payload: jsonData });\n                    // console.log({ jsonData });\n                })\n                .catch(err => {\n                    // Third Action Dispatch\n                    // dispatch({ type: 'ERROR', payload: err });\n                    console.log({ err });\n                }).finally(() => {\n                    dispatch(isLoading());\n                });\n        }, 1000);\n    };\n\n};","import React from 'react';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { useSelector, useDispatch, useStore } from 'react-redux';\nimport {\n    increment,\n    decrement,\n    incrementByValue,\n    decrementByValueAsnc,\n    decrementByValue,\n    loadAPIData\n} from '../actions';\nexport default function SampleRedux() {\n    const counter = useSelector(state => state.counter);\n    const isLogged = useSelector(state => state.isLogged);\n    const isLoading = useSelector(state => state.isLoading);\n    const data = useSelector(state => state.data);\n\n    const dispatch = useDispatch();\n\n    const store = useStore();\n\n    console.log({ store });\n\n    let arr = data.arr;\n\n    function Lists({ arrs }) {\n        const todoItems = arrs.map((todo) => <li key={todo.id}>{todo.title}</li>);\n        return (\n            <ul>{todoItems}</ul>\n        );\n    }\n\n    function onClickHandle() {\n        dispatch(increment());\n    }\n\n    return (\n        <div className=\"App\">\n            <h1 className='text-center'>React and redux {counter}</h1>\n            <ButtonGroup aria-label=\"Basic example\">\n                <button\n                    className='btn btn-primary'\n                    onClick={onClickHandle}\n                >\n                    increment {counter}\n                </button>\n\n                <button\n                    className='btn btn-danger'\n                    onClick={() => dispatch(decrement())}\n                >\n                    decrement {counter}\n                </button>\n\n                <button\n                    className='btn btn-success'\n                    onClick={() => dispatch(incrementByValue(5))}\n                >\n                    increment by value {counter}\n                </button>\n\n                <button\n                    className='btn btn-info'\n                    onClick={() => dispatch(decrementByValueAsnc(5))}\n                >\n                    decrement by value async {counter}\n                </button>\n                <button\n                    className='btn btn-warning'\n                    onClick={() => dispatch(decrementByValue(5))}\n                >\n                    decrement by value {counter}\n                </button>\n            </ButtonGroup>\n            <p>{isLoading ? 'Its loading' : null}</p>\n\n            <div>\n                <button\n                    className='btn btn-info'\n                    onClick={() => dispatch(loadAPIData())}\n                >\n                    Load api data\n                </button>\n            </div>\n            <div>\n                <p>one</p>\n                <Lists arrs={arr} />\n                <p>two</p>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, NavLink, Switch, Redirect } from 'react-router-dom';\nimport Home from './Home';\nimport Login from './Login';\nimport NotFound from './NotFound';\nimport Navigation from './Navigation';\nimport SampleRedux from './SampleRedux';\n\nexport default function Routes() {\n    return (\n        <div>\n            <Router>\n                <Navigation />\n                <Switch>\n                    <Route exact path='/' component={Home} />\n                    <Route path='/login' component={Login} />\n                    <Route path='/redux-example' component={SampleRedux} />\n                    <Route component={NotFound} />\n                </Switch>\n            </Router>\n        </div>\n    )\n}\n","import React from 'react';\n// import './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Routes from './components/Routes';\n\nfunction App() {\n  return (\n    <div>\n\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './configureStore';\nimport Root from './components/Root';\n\nconst store = configureStore();\n\nrender(\n    <Root store={store} />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from \"react-redux\";\nimport App from './../App';\n\nexport default function Root({ store }) {\n    return (\n        <Provider store={store}>\n            <App />\n        </Provider>\n    );\n}\n"],"sourceRoot":""}